{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOGOUT_FAILURE, LOGOUT_SUCCESS, CLEAR_ERRORS } from '../constants/userConstants';\n\n// const initialState = {\n//   user: null,           // Set initial user as null\n//   isAuthenticated: false,  // User is not authenticated by default\n//   loading: false,       // Indicate whether the state is loading (e.g., during login)\n// };\n\nconst initialState = {\n  user: null,\n  loading: false,\n  error: null\n};\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n    case REGISTER_USER_REQUEST:\n    case LOAD_USER_REQUEST:\n      return {\n        loading: true,\n        isAuthenticated: false\n      };\n    case LOGIN_SUCCESS:\n    case REGISTER_USER_SUCCESS:\n    case LOAD_USER_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: true,\n        loading: false,\n        user: action.payload // Store the user data in the Redux state\n      };\n    case LOGOUT_SUCCESS:\n      return {\n        loading: false,\n        isAuthenticated: false,\n        user: null\n      };\n    case LOAD_USER_FAILURE:\n      return {\n        loading: false,\n        isAuthenticated: false,\n        user: null,\n        error: action.payload // Store the error message in the Redux state\n      };\n    case LOGOUT_FAILURE:\n      return {\n        ...state,\n        error: action.payload\n      };\n    case LOGIN_FAILURE:\n    case REGISTER_USER_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: false,\n        user: null,\n        error: action.payload\n      };\n    case CLEAR_ERRORS:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport default authReducer;","map":{"version":3,"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOGOUT_FAILURE","LOGOUT_SUCCESS","CLEAR_ERRORS","initialState","user","loading","error","authReducer","state","action","type","isAuthenticated","payload"],"sources":["C:/Github/rushikersclub-web/frontend/src/reducers/authReducer.js"],"sourcesContent":["import {\r\n  LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE,\r\n  REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAILURE,\r\n  LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE,\r\n  LOGOUT_FAILURE, LOGOUT_SUCCESS,\r\n  CLEAR_ERRORS\r\n} from '../constants/userConstants';\r\n\r\n// const initialState = {\r\n//   user: null,           // Set initial user as null\r\n//   isAuthenticated: false,  // User is not authenticated by default\r\n//   loading: false,       // Indicate whether the state is loading (e.g., during login)\r\n// };\r\n\r\nconst initialState = {\r\n  user: null,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n    case REGISTER_USER_REQUEST:\r\n    case LOAD_USER_REQUEST:\r\n      return {\r\n     \r\n        loading: true,\r\n        isAuthenticated: false,\r\n      };\r\n\r\n    case LOGIN_SUCCESS:\r\n    case REGISTER_USER_SUCCESS:\r\n    case LOAD_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        user: action.payload  // Store the user data in the Redux state\r\n        \r\n      };\r\n\r\n    case LOGOUT_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n      };  \r\n\r\n    case LOAD_USER_FAILURE:\r\n      return {\r\n      \r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        error: action.payload  // Store the error message in the Redux state\r\n        \r\n       \r\n      }; \r\n\r\n    case LOGOUT_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };   \r\n\r\n\r\n    case LOGIN_FAILURE:\r\n    case REGISTER_USER_FAILURE:\r\n    \r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        error:action.payload\r\n      };\r\n\r\n    case CLEAR_ERRORS:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n"],"mappings":"AAAA,SACEA,aAAa,EAAEC,aAAa,EAAEC,aAAa,EAC3CC,qBAAqB,EAAEC,qBAAqB,EAAEC,qBAAqB,EACnEC,iBAAiB,EAAEC,iBAAiB,EAAEC,iBAAiB,EACvDC,cAAc,EAAEC,cAAc,EAC9BC,YAAY,QACP,4BAA4B;;AAEnC;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKnB,aAAa;IAClB,KAAKG,qBAAqB;IAC1B,KAAKG,iBAAiB;MACpB,OAAO;QAELQ,OAAO,EAAE,IAAI;QACbM,eAAe,EAAE;MACnB,CAAC;IAEH,KAAKnB,aAAa;IAClB,KAAKG,qBAAqB;IAC1B,KAAKG,iBAAiB;MACpB,OAAO;QACL,GAAGU,KAAK;QACRG,eAAe,EAAE,IAAI;QACrBN,OAAO,EAAE,KAAK;QACdD,IAAI,EAAEK,MAAM,CAACG,OAAO,CAAE;MAExB,CAAC;IAEH,KAAKX,cAAc;MACjB,OAAO;QACLI,OAAO,EAAE,KAAK;QACdM,eAAe,EAAE,KAAK;QACtBP,IAAI,EAAE;MACR,CAAC;IAEH,KAAKL,iBAAiB;MACpB,OAAO;QAELM,OAAO,EAAE,KAAK;QACdM,eAAe,EAAE,KAAK;QACtBP,IAAI,EAAE,IAAI;QACVE,KAAK,EAAEG,MAAM,CAACG,OAAO,CAAE;MAGzB,CAAC;IAEH,KAAKZ,cAAc;MACjB,OAAO;QACL,GAAGQ,KAAK;QACRF,KAAK,EAAEG,MAAM,CAACG;MAChB,CAAC;IAGH,KAAKnB,aAAa;IAClB,KAAKG,qBAAqB;MAExB,OAAO;QACL,GAAGY,KAAK;QACRH,OAAO,EAAE,KAAK;QACdM,eAAe,EAAE,KAAK;QACtBP,IAAI,EAAE,IAAI;QACVE,KAAK,EAACG,MAAM,CAACG;MACf,CAAC;IAEH,KAAKV,YAAY;MACf,OAAO;QACL,GAAGM,KAAK;QACRF,KAAK,EAAE;MACT,CAAC;IAEH;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}